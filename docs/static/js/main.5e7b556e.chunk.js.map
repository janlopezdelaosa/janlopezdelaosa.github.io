{"version":3,"sources":["components/Footer.tsx","components/Header.tsx","api/defs.ts","api/locations.ts","svg/Search.tsx","svg/Cross.tsx","components/InputBox.tsx","components/DateSummaryForecast.tsx","api/forecast.ts","components/DateHourlyForecast.tsx","components/WeeklyForecast.tsx","components/ErrorBoundary.tsx","App.tsx","index.tsx"],"names":["Footer","className","Header","dayjs","format","apiBase","useLocations","endPoint","useQuery","a","fetch","response","ok","json","data","Error","msg","Cross","fill","onClick","xmlns","viewBox","fillRule","d","clipRule","InputBox","setCity","useState","term","setTerm","isCitySelected","setIsCitySelected","locations","type","placeholder","list","onChange","e","target","value","location","filter","l","name","country","undefined","slug","Search","id","map","DateSummaryForecast","isSelected","date","max","min","useForecast","start","end","pLocation","pStart","pEnd","DateHourlyForecast","hourly","selected","setSelected","i","WeeklyForecast","city","days","now","Date","startDate","getFullYear","getMonth","getDate","startingStr","toISOString","split","finishDate","setDate","finishStr","forecast","setHourly","length","Math","ErrorBoundary","props","state","hasError","this","children","error","React","Component","App","queryClient","QueryClient","defaultOptions","queries","suspense","QueryClientProvider","client","fallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAaeA,EARuB,WACpC,OACE,qBAAKC,UAAU,4BAAf,SACE,mBAAGA,UAAU,UAAb,0C,iBCUSC,EAbuB,WACpC,OACE,sBAAKD,UAAU,iDAAf,UACE,oBAAIA,UAAU,uCAAd,gCAGA,mBAAGA,UAAU,qBAAb,SACGE,MAAQC,OAAO,8B,iCCXXC,EAAU,4CCkBRC,MAhBf,WACE,IAAMC,EAAQ,UAAMF,EAAN,cAYd,OAVcG,YAAS,YAAD,sBAAc,8BAAAC,EAAA,sEACXC,MAAMH,GADK,WAC5BI,EAD4B,QAEpBC,GAFoB,iCAGbD,EAASE,OAHI,aAG1BC,EAH0B,OAI1B,IAAIC,MAAMD,EAAKE,KAJW,iCAMzBL,EAASE,QANgB,6CAUvBC,MCcAG,EAtBqB,SAAC,GAI9B,IAAD,IAHJC,YAGI,MAHG,eAGH,MAFJjB,iBAEI,MAFQ,GAER,MADJkB,eACI,MADM,aACN,EACJ,OACE,qBACEC,MAAM,6BACNC,QAAQ,YACRH,KAAMA,EACNjB,UAAWA,EACXkB,QAASA,EALX,SAOE,sBACEG,SAAS,UACTC,EAAE,mHACFC,SAAS,eCMFP,EAtBqB,SAAC,GAI9B,IAAD,IAHJC,YAGI,MAHG,eAGH,MAFJjB,iBAEI,MAFQ,GAER,MADJkB,eACI,MADM,aACN,EACJ,OACE,qBACEC,MAAM,6BACNC,QAAQ,YACRH,KAAMA,EACNjB,UAAWA,EACXkB,QAASA,EALX,SAOE,sBACEG,SAAS,UACTC,EAAE,0NACFC,SAAS,eCuCFC,EAtD2B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACjCC,mBAAS,IADwB,mBAClDC,EADkD,KAC5CC,EAD4C,OAEbF,oBAAS,GAFI,mBAElDG,EAFkD,KAElCC,EAFkC,KAGnDC,EAAY1B,IAalB,OACE,qCACE,sBAAKL,UAAU,kBAAf,UACE,uBACEA,UAAS,+GACP6B,EAAiB,YAAc,GADxB,eAGTG,KAAK,OACLC,YAAY,gBACZC,KAAK,SACLC,SArBS,SAACC,GAChBR,EAAQQ,EAAEC,OAAOC,OACjB,IAAMC,EAAQ,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAWS,QAC1B,SAACC,GAAD,MAAO,UAAGA,EAAEC,KAAL,aAAcD,EAAEE,WAAcP,EAAEC,OAAOC,SAC9C,QACeM,IAAbL,IACFd,EAAQc,EAASM,MACjBf,GAAkB,KAedQ,MAAOX,IAET,sBAAK3B,UAAU,wEAAf,UACE,cAAC8C,EAAD,CAAQ9C,UAAU,qBACjB2B,GACC,cAAC,EAAD,CACE3B,UAAU,wCACVkB,QAAS,WACPU,EAAQ,IACRH,EAAQ,IACRK,GAAkB,YAO5B,0BAAUiB,GAAG,SAAb,SACGhB,GACCA,EAAUiB,KAAI,SAACP,GAAD,OACZ,2CAAyBA,EAAEC,KAA3B,aAAoCD,EAAEE,UAAzBF,EAAEI,e,QCnBZI,EA1BiD,SAAC,GAM1D,IALLC,EAKI,EALJA,WACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,IACAnC,EACI,EADJA,QAEA,OACE,yBACElB,UAAS,+IACPkD,EAAa,aAAe,IAE9BhC,QAASA,EAJX,UAME,mBAAGlB,UAAU,sBAAb,SACGE,IAAMiD,EAAM,cAAchD,OAAO,YAEpC,qBAAKH,UAAU,2CAAf,SACE,8BACGqD,EADH,UACYD,EADZ,gBCNOE,MApBf,SAAqBT,EAAcU,EAAeC,GAChD,IAAMlD,EAAQ,UAAMF,EAAN,eACRqD,EAAS,mBAAeZ,GACxBa,EAAM,gBAAYH,GAClBI,EAAI,cAAUH,GAapB,OAXcjD,YAAS,YAAD,sBAAc,8BAAAC,EAAA,sEACXC,MAAM,GAAD,OAAIH,EAAJ,YAAgBmD,EAAhB,YAA6BC,EAA7B,YAAuCC,IADjC,WAC5BjD,EAD4B,QAGpBC,GAHoB,iCAIbD,EAASE,OAJI,aAI1BC,EAJ0B,OAK1B,IAAIC,MAAMD,EAAKE,KALW,iCAOzBL,EAASE,QAPgB,6CAWvBC,MCkBA+C,EAhC+C,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EAC5CnC,oBAAU,GADkC,mBACrEoC,EADqE,KAC3DC,EAD2D,KAG5E,OAEE,aADA,CACA,OAAK/D,UAAU,8GAAf,gBACG6D,QADH,IACGA,OADH,EACGA,EAAQb,KAAI,SAAC1B,EAAG0C,GAAJ,OACX,sBACEhE,UAAU,6BAEVkB,QAAS,kBAAM6C,EAAYC,IAH7B,UAKE,uBACEhE,UAAS,UACP8D,IAAaE,EAAI,cAAgB,aAD1B,eADX,UAKGA,EALH,QAMQ,IACR,uBACEhE,UAAS,UACP8D,IAAaE,EAAI,YAAc,cADxB,oCADX,UAKG1C,EALH,YAVK0C,SCiDAC,EAtDuC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAqB,IAAfC,YAAe,MAAR,EAAQ,EACtEC,EAAM,IAAIC,KASVC,EARQ,IAAID,KAChBD,EAAIG,cACJH,EAAII,WACJJ,EAAIK,UACJ,EACA,EACA,GAIIC,EAAcJ,EAAUK,cAAcC,MAAM,KAAK,GAEnDC,EAAa,IAAIR,KAAKC,GAC1BO,EAAWC,QAAQD,EAAWJ,UAAYN,GAC1C,IAAMY,EAAYF,EAAWF,cAAcC,MAAM,KAAK,GAEhDI,EAAW1B,EAAYY,EAAMQ,EAAaK,GAlB4B,EAoBhDrD,mBAAmB,IApB6B,mBAoBrEmC,EApBqE,KAoB7DoB,EApB6D,OAsB5CvD,oBAAU,GAtBkC,mBAsBrEoC,EAtBqE,KAsB3DC,EAtB2D,KAwB5E,OACE,qCACE,qBAAK/D,UAAU,oDAAf,cACgB4C,IAAboC,GAA0BA,EAASE,OAAS,EAA5C,OACCF,QADD,IACCA,OADD,EACCA,EAAUhC,KAAI,SAAC1B,EAAG0C,GAChB,IAAMX,EAAM8B,KAAK9B,IAAL,MAAA8B,KAAI,YAAQ7D,EAAEuC,SACpBT,EAAM+B,KAAK/B,IAAL,MAAA+B,KAAI,YAAQ7D,EAAEuC,SAC1B,OACE,cAAC,EAAD,CAEEX,WAAYc,IAAMF,EAClBX,KAAM7B,EAAE6B,KACRC,IAAKA,EACLC,IAAKA,EACLnC,QAAS,WACP+D,EAAU3D,EAAEuC,QACZE,EAAYC,KAPTA,MAaX,oFAAuDgB,OAGxC,IAAlBnB,EAAOqB,QAAgB,cAAC,EAAD,CAAoBrB,OAAQA,Q,gDCnC3CuB,E,kDArBb,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFH,E,0CAUxB,WAEE,OAAIC,KAAKF,MAAMC,SAEN,uDAGFC,KAAKH,MAAMI,Y,uCAZpB,SAAgCC,GAE9B,MAAO,CAAEH,UAAU,O,GARKI,IAAMC,WC6CnBC,EAvCO,WAAO,IAAD,EACFnE,mBAAS,IADP,mBACnBwC,EADmB,KACbzC,EADa,KAEpBqE,EAAc,IAAIC,IAAY,CAClCC,eAAgB,CACdC,QAAS,CACPC,UAAU,MAKhB,OACE,eAACC,EAAA,EAAD,CAAqBC,OAAQN,EAA7B,UACE,sBAAK9F,UAAU,2CAAf,UACE,cAAC,EAAD,IAEA,qBAAKA,UAAU,gDAAf,SACE,cAAC,EAAD,UACE,cAAC,WAAD,CAAUqG,SAAU,0CAApB,SACE,cAAC,EAAD,CAAU5E,QAASA,aAM3B,qBAAKzB,UAAU,gDAAf,SACE,cAAC,EAAD,UACE,cAAC,WAAD,CAAUqG,SAAU,0CAApB,SACY,KAATnC,GAAe,cAAC,EAAD,CAAgBA,KAAMA,UAK5C,qBAAKlE,UAAU,8CAAf,SACE,cAAC,EAAD,U,MCnCRsG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5e7b556e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport dayjs from \"dayjs\";\r\n\r\ninterface FooterProps {}\r\n\r\nconst Footer: React.FC<FooterProps> = () => {\r\n  return (\r\n    <div className=\"p-4 flex flex-row-reverse\">\r\n      <p className=\"text-xs\">janlopezdelaosa@gmail.com</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport dayjs from \"dayjs\";\r\n\r\ninterface HeaderProps {}\r\n\r\nconst Header: React.FC<HeaderProps> = () => {\r\n  return (\r\n    <div className=\"p-4 md:px-20 flex justify-between items-center\">\r\n      <h2 className=\"font-extrabold uppercase lg:text-2xl\">\r\n        Weather Forecaster\r\n      </h2>\r\n      <p className=\"text-xs lg:text-lg\">\r\n        {dayjs().format(\"MMMM D, YYYY | HH:mm\")}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","// export const apiBase = \"http://localhost:3000\";\r\nexport const apiBase = \"https://morning-falls-52071.herokuapp.com\";\r\n\r\nexport interface LocationData {\r\n  country: string;\r\n  name: string;\r\n  slug: string;\r\n}\r\n\r\nexport type ForecastData = {\r\n  date: string;\r\n  hourly: number[];\r\n  locationSlug: string;\r\n};\r\n","import { useQuery } from \"react-query\";\r\nimport { apiBase, LocationData } from \"./defs\";\r\n\r\nfunction useLocations(): LocationData[] {\r\n  const endPoint = `${apiBase}/locations`;\r\n\r\n  const query = useQuery(\"locations\", async () => {\r\n    const response = await fetch(endPoint);\r\n    if (!response.ok) {\r\n      const data = await response.json();\r\n      throw new Error(data.msg);\r\n    } else {\r\n      return response.json();\r\n    }\r\n  });\r\n\r\n  return query.data;\r\n}\r\n\r\nexport default useLocations;\r\n","import React from \"react\";\r\n\r\ninterface CrossProps {\r\n  fill?: string;\r\n  className?: string;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst Cross: React.FC<CrossProps> = ({\r\n  fill = \"currentColor\",\r\n  className = \"\",\r\n  onClick = () => {},\r\n}) => {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 20 20\"\r\n      fill={fill}\r\n      className={className}\r\n      onClick={onClick}\r\n    >\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"\r\n        clipRule=\"evenodd\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Cross;\r\n","import React from \"react\";\r\n\r\ninterface CrossProps {\r\n  fill?: string;\r\n  className?: string;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst Cross: React.FC<CrossProps> = ({\r\n  fill = \"currentColor\",\r\n  className = \"\",\r\n  onClick = () => {},\r\n}) => {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 20 20\"\r\n      fill={fill}\r\n      className={className}\r\n      onClick={onClick}\r\n    >\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\r\n        clipRule=\"evenodd\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Cross;\r\n","import React, { useState } from \"react\";\r\nimport useLocations from \"../api/locations\";\r\nimport Search from \"../svg/Search\";\r\nimport Cross from \"../svg/Cross\";\r\n\r\ninterface InputBoxProps {\r\n  setCity: React.Dispatch<React.SetStateAction<string>>;\r\n}\r\n\r\nconst InputBox: React.FC<InputBoxProps> = ({ setCity }) => {\r\n  const [term, setTerm] = useState(\"\");\r\n  const [isCitySelected, setIsCitySelected] = useState(false);\r\n  const locations = useLocations();\r\n\r\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTerm(e.target.value);\r\n    const location = locations?.filter(\r\n      (l) => `${l.name}, ${l.country}` === e.target.value\r\n    )[0];\r\n    if (location !== undefined) {\r\n      setCity(location.slug);\r\n      setIsCitySelected(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative w-full\">\r\n        <input\r\n          className={`cityinput w-full pl-10 lg:pl-14 pr-1 py-1 border-black border-solid rounded-lg border-2 outline-none ${\r\n            isCitySelected ? \"font-bold\" : \"\"\r\n          } lg:text-xl`}\r\n          type=\"text\"\r\n          placeholder=\"City, Country\"\r\n          list=\"cities\"\r\n          onChange={onChange}\r\n          value={term}\r\n        />\r\n        <div className=\"absolute inset-0 flex items-align justify-between pointer-events-none\">\r\n          <Search className=\"ml-3 lg:ml-5 w-5\" />\r\n          {term && (\r\n            <Cross\r\n              className=\"mr-7 lg:mr-10 w-5 pointer-events-auto\"\r\n              onClick={() => {\r\n                setTerm(\"\");\r\n                setCity(\"\");\r\n                setIsCitySelected(false);\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <datalist id=\"cities\">\r\n        {locations &&\r\n          locations.map((l) => (\r\n            <option key={l.slug}>{`${l.name}, ${l.country}`}</option>\r\n          ))}\r\n      </datalist>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputBox;\r\n","import React from \"react\";\r\nimport dayjs from \"dayjs\";\r\n\r\ninterface DateSummaryForecastProps {\r\n  isSelected: boolean;\r\n  date: string;\r\n  max: number;\r\n  min: number;\r\n  onClick: () => void;\r\n}\r\n\r\nconst DateSummaryForecast: React.FC<DateSummaryForecastProps> = ({\r\n  isSelected,\r\n  date,\r\n  max,\r\n  min,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <button\r\n      className={`p-4 md:p-6 m-2 md:m-4 flex flex-col items-center border-black border-solid rounded-lg border-2 outline-none transform hover:scale-105${\r\n        isSelected ? \" font-bold\" : \"\"\r\n      }`}\r\n      onClick={onClick}\r\n    >\r\n      <p className=\"text-xl lg:text-2xl\">\r\n        {dayjs(date, \"MM-DD-YYYY\").format(\"DD MMM\")}\r\n      </p>\r\n      <div className=\"flex flex-row justify-between lg:text-lg\">\r\n        <p>\r\n          {min}º / {max}º\r\n        </p>\r\n      </div>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DateSummaryForecast;\r\n","import { useQuery } from \"react-query\";\r\nimport { apiBase, ForecastData } from \"./defs\";\r\n\r\nfunction useForecast(slug: string, start: string, end: string): ForecastData[] {\r\n  const endPoint = `${apiBase}/forecaster`;\r\n  const pLocation = `location=${slug}`;\r\n  const pStart = `start=${start}`;\r\n  const pEnd = `end=${end}`;\r\n\r\n  const query = useQuery(\"locations\", async () => {\r\n    const response = await fetch(`${endPoint}?${pLocation}&${pStart}&${pEnd}`);\r\n\r\n    if (!response.ok) {\r\n      const data = await response.json();\r\n      throw new Error(data.msg);\r\n    } else {\r\n      return response.json();\r\n    }\r\n  });\r\n\r\n  return query.data;\r\n}\r\n\r\nexport default useForecast;\r\n","import React, { useState } from \"react\";\r\n\r\ninterface DateHourlyForecastProps {\r\n  hourly: number[];\r\n}\r\n\r\nconst DateHourlyForecast: React.FC<DateHourlyForecastProps> = ({ hourly }) => {\r\n  const [selected, setSelected] = useState(-1);\r\n\r\n  return (\r\n    // <div className=\"flex flex-col items-center\">\r\n    <div className=\"pt-8 grid grid-cols-2 md:grid-cols-6 grid-rows-12 md:grid-rows-4 grid-flow-col gap-y-2 md:gap-y-10 gap-x-12\">\r\n      {hourly?.map((d, i) => (\r\n        <div\r\n          className=\"flex flex-row items-center\"\r\n          key={i}\r\n          onClick={() => setSelected(i)}\r\n        >\r\n          <span\r\n            className={`${\r\n              selected === i ? \"font-normal\" : \"font-light\"\r\n            } md:text-lg`}\r\n          >\r\n            {i}h:\r\n          </span>{\" \"}\r\n          <span\r\n            className={`${\r\n              selected === i ? \"font-bold\" : \"font-normal\"\r\n            } ml-1 md:ml-3 text-lg md:text-xl`}\r\n          >\r\n            {d}º\r\n          </span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateHourlyForecast;\r\n","import React, { useState } from \"react\";\r\nimport DateSummaryForecast from \"./DateSummaryForecast\";\r\nimport useForecast from \"../api/forecast\";\r\nimport DateHourlyForecast from \"./DateHourlyForecast\";\r\n\r\ninterface WeeklyForecastProps {\r\n  city: string;\r\n  days?: number;\r\n}\r\n\r\nconst WeeklyForecast: React.FC<WeeklyForecastProps> = ({ city, days = 5 }) => {\r\n  const now = new Date();\r\n  const today = new Date(\r\n    now.getFullYear(),\r\n    now.getMonth(),\r\n    now.getDate(),\r\n    0,\r\n    0,\r\n    0\r\n  );\r\n  const startDate = today;\r\n  // ISO format example 2021-02-11T18:45:55.136Z\r\n  const startingStr = startDate.toISOString().split(\"T\")[0];\r\n\r\n  let finishDate = new Date(startDate);\r\n  finishDate.setDate(finishDate.getDate() + days);\r\n  const finishStr = finishDate.toISOString().split(\"T\")[0];\r\n\r\n  const forecast = useForecast(city, startingStr, finishStr);\r\n\r\n  const [hourly, setHourly] = useState<number[]>([]);\r\n\r\n  const [selected, setSelected] = useState(-1);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"p-2 md:p-4 flex flex-wrap flex-row justify-center\">\r\n        {forecast !== undefined && forecast.length > 0 ? (\r\n          forecast?.map((d, i) => {\r\n            const min = Math.min(...d.hourly);\r\n            const max = Math.max(...d.hourly);\r\n            return (\r\n              <DateSummaryForecast\r\n                key={i}\r\n                isSelected={i === selected}\r\n                date={d.date}\r\n                max={max}\r\n                min={min}\r\n                onClick={() => {\r\n                  setHourly(d.hourly);\r\n                  setSelected(i);\r\n                }}\r\n              />\r\n            );\r\n          })\r\n        ) : (\r\n          <p>There is no forecast data for the following 5 days {forecast}</p>\r\n        )}\r\n      </div>\r\n      {hourly.length !== 0 && <DateHourlyForecast hourly={hourly} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeeklyForecast;\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: any) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  render() {\r\n    //@ts-ignore\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <h1>Something went wrong.</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Suspense, useState } from \"react\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport InputBox from \"./components/InputBox\";\nimport WeeklyForecast from \"./components/WeeklyForecast\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\n\nconst App: React.FC = () => {\n  const [city, setCity] = useState(\"\");\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        suspense: true,\n      },\n    },\n  });\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className=\"fixed top-0 left-0 right-0 bg-white z-10\">\n        <Header />\n\n        <div className=\"py-4 px-4 md:px-20 w-full flex justify-center\">\n          <ErrorBoundary>\n            <Suspense fallback={<div>loading</div>}>\n              <InputBox setCity={setCity} />\n            </Suspense>\n          </ErrorBoundary>\n        </div>\n      </div>\n\n      <div className=\"pt-32 pb-16 flex flex-col w-full items-center\">\n        <ErrorBoundary>\n          <Suspense fallback={<div>loading</div>}>\n            {city !== \"\" && <WeeklyForecast city={city} />}\n          </Suspense>\n        </ErrorBoundary>\n      </div>\n\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white z-10\">\n        <Footer />\n      </div>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n//import reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}